# -*- coding: utf-8 -*-
"""TM_Project_Phase2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k7W47HArHd8_gnmn5lEh6aQbTRxyFw0T
"""

import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
nltk.download('words')
nltk.download('stopwords')

questions = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/Questions.csv", low_memory=False).iloc[0:15463, :3]
newcomments = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/newcomments.csv")
newanswers = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/newanswers.csv")

ppnewcomments = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/Phase2/Ph2PPnewcommentsStem.csv")
with open('/content/drive/MyDrive/Colab Files/TM-Project/Phase2/positive-words.txt', errors='ignore') as f:
    positives1 = f.readlines()
with open('/content/drive/MyDrive/Colab Files/TM-Project/Phase2/negative-words.txt', errors='ignore') as f:
    negatives1 = f.readlines()
negatives = []
positives = []
for i in negatives1:
  negatives.append(i[:-1])
for i in positives1:
  positives.append(i[:-1])

print(ppnewcomments)

comments = ppnewcomments['PPText'].to_numpy()
commentsCount = len(comments)
print(comments)

words = set(nltk.corpus.words.words())
stop_words = set(stopwords.words('english'))

commentslist =[]
ppcomments = []
for c in comments:
  if(type(c) != float):
    pprow = ""
    for i in c.split():
      if i in words:
        if i not in stop_words:
          pprow += i +" "
          commentslist.append(i)
    ppcomments.append(pprow[:-1])
  else:
    commentslist.append(" ")
    ppcomments.append(" ")


commentsWordsCount = len(commentslist)

print(len(commentslist))

"""#Calculating p(y) and p(x)"""

pyPositive = []
pyNegative = []
for y in positives:
 pyPositive.append( round ((commentslist.count(y) / commentsWordsCount) * 1000000 , 2) )
for y in negatives:
 pyNegative.append( round ((commentslist.count(y) / commentsWordsCount) * 1000000 , 2) )

print(pyPositive)
print(pyNegative)

positivesDF = pd.DataFrame({'y':positives, 'P(y)': pyPositive})
positivesDF = positivesDF.drop(positivesDF[positivesDF['P(y)'] == 0].index).reset_index(drop=True)
negativesDF = pd.DataFrame({'y':negatives, 'P(y)': pyNegative})
negativesDF = negativesDF.drop(negativesDF[negativesDF['P(y)'] == 0].index).reset_index(drop=True)
print(positivesDF)
print(negativesDF)
positivesDF.to_csv('/content/drive/MyDrive/Colab Files/TM-Project/Phase2/positivesDF.csv', index=False)
negativesDF.to_csv('/content/drive/MyDrive/Colab Files/TM-Project/Phase2/negativesDF.csv', index=False)

allpx = {}
for w in np.unique(commentslist):
  allpx[w] = round( (commentslist.count(w) / commentsWordsCount) * 1000000, 2)
del allpx[" "]

print(allpx)

posy = positivesDF['y'].to_numpy()
pospy = positivesDF['P(y)'].to_numpy()
negy = negativesDF['y'].to_numpy()
negpy = negativesDF['P(y)'].to_numpy()

"""# count of positives and negatives"""

#count of positives and negatives
posFlag = np.zeros(len(ppcomments))
negFlag = np.zeros(len(ppcomments))
count = 0
for i in range(len(ppcomments)):
  if( type(ppcomments[i]) != float):
    oneComment = ppcomments[i].split()
    for p in range(len(posy)):
      if posy[p] in oneComment:
        posFlag[i] += pospy[p]
    for n in range(len(negy)):
      if negy[n] in oneComment:
        negFlag[i] += negpy[p]

"""#next"""

allsentis = {}
results = []
for c in range(len(ppcomments)):
  if(posFlag[c] == 0 and negFlag[c] == 0):
    results.append('neutral')
  elif(posFlag[c] >= negFlag[c]):
    results.append('positive')
  elif(posFlag[c] <= negFlag[c]):
    results.append('negative')
  else:
    row = ppcomments[c].split()
    sentiment = 0
    for x in row:
      # x with positives
      if(allsentis.get(x) == None):
        for y in range(len(posy)):
          cxy = 0
          for co in range(len(ppcomments)):
            if(posFlag[co] > 0):
              thisrow = ppcomments[co].split()
              if posy[y] in thisrow:
                if x in thisrow:
                  cxy +=1
          pxy = round( (cxy / commentsCount) * 10000000000, 2)
          sentiment += pxy / (allpx[x] * pospy[y])
        # x with negatives
        for y in range(len(negy)):
          cxy = 0
          for co in range(len(ppcomments)):
            if(negFlag[co] > 0):
              thisrow = ppcomments[co].split()
              if negy[y] in thisrow:
                if x in thisrow:
                  cxy +=1
          pxy = round( (cxy / commentsCount) * 10000000000, 2)
          sentiment -= pxy / (allpx[x] * negpy[y])
        allsentis[x] = sentiment
      else:
        sentiment += allsentis[x]
    if(sentiment > 0):
      results.append('positive')
    elif(sentiment < 0):
      results.append('negative')
    else:
      results.append('neutral')

output = pd.DataFrame(results, columns=['Label'])
df = newcomments['PostId(AnswerId)'].copy()
df = pd.concat([df, output], axis= 1)
df = df.dropna()
df.loc[df['Label'] == 'positive', 'Label'] = 5
df.loc[df['Label'] == 'negative', 'Label'] = 0
df.loc[df['Label'] == 'neutral', 'Label'] = 1
answerID = []
answerScore = []
for a in df['PostId(AnswerId)'].unique():
  score = df.loc[df['PostId(AnswerId)'] == a, 'Label'].sum()
  answerID.append(a)
  answerScore.append(score)
answerID = pd.DataFrame(answerID, columns=['answerID'])
answerScore = pd.DataFrame(answerScore, columns=['answerScore'])
scores = pd.concat([answerID, answerScore], axis= 1)
aIDs = newanswers[['Id' , 'ParentId(QuestionId)']]
scores['questionID'] = np.zeros(len(scores))
for id, parent in zip(aIDs['Id'], aIDs['ParentId(QuestionId)']):
  scores.loc[ scores['answerID'] == id , 'questionID'] = parent
accepted = []
for q in scores['questionID'].unique():
  accepted.append(scores.iloc[scores.loc[scores['questionID'] == q, 'answerScore'].idxmax(), 0])
trueAccepted = questions['AcceptedAnswerId'].to_numpy()
correct = 0
for i in accepted:
  if i in trueAccepted:
    correct += 1

print( "accuracy: %.2f%%" %(correct / len(accepted)*100 ))