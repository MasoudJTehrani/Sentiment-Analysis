# -*- coding: utf-8 -*-
"""TM_Project_phase1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wCVX9kaq5QpF-C9l02WatbIek_9QLVKE
"""

import pandas as pd
import numpy as np
import os

comments = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/comments.csv", low_memory=False).iloc[0:478676, :]
answers = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/Answers.csv", low_memory=False).iloc[0:128813, :3]
questions = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/Questions.csv", low_memory=False).iloc[0:15463, :3]
newcomments = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/newcomments.csv")
newanswers = pd.read_csv("/content/drive/MyDrive/Colab Files/TM-Project/newanswers.csv")

print(questions)

print(answers)

print(comments)

"""#File generator"""

newanswers = pd.DataFrame(columns= ['Id','ParentId(QuestionId)','Body'])
for q in questions['Id']:
  entry = answers.loc[ answers['ParentId(QuestionId)'] == q ] 
  newanswers = pd.concat([newanswers,entry])
newanswers.reset_index(drop=True, inplace=True)
newanswers.to_csv('/content/drive/MyDrive/Colab Files/TM-Project/newanswers.csv', index=False)
print(newanswers)

newcomments = pd.DataFrame(columns= ['Id','PostId(AnswerId)','Text'])
for a in newanswers['Id']:
  entry = comments.loc[ comments['PostId(AnswerId)'] == a ] 
  newcomments = pd.concat([newcomments,entry])
newcomments.reset_index(drop=True, inplace=True)
newcomments.to_csv('/content/drive/MyDrive/Colab Files/TM-Project/newcomments.csv', index=False)
print(newcomments)

"""#Output Generator"""

path = "/content/drive/MyDrive/Colab Files/TM-Project/Predict(comment)"
output = []
for file in os.listdir(path):
  file_path = f"{path}/{file}"
  csv = pd.read_csv(file_path)
  for i in range(len(csv)):
    output.append(csv.loc[csv['Row'] == 't'+str(i), 'Predicted'].iloc[0])

output = pd.DataFrame(output, columns=['Label'])

"""#Accuracy calc"""

df = newcomments['PostId(AnswerId)'].copy()
df = pd.concat([df, output], axis= 1)
df = df.dropna()
df.loc[df['Label'] == 'positive', 'Label'] = 5
df.loc[df['Label'] == 'negative', 'Label'] = 0
df.loc[df['Label'] == 'neutral', 'Label'] = 1
print(df)

answerID = []
answerScore = []
for a in df['PostId(AnswerId)'].unique():
  score = df.loc[df['PostId(AnswerId)'] == a, 'Label'].sum()
  answerID.append(a)
  answerScore.append(score)

answerID = pd.DataFrame(answerID, columns=['answerID'])
answerScore = pd.DataFrame(answerScore, columns=['answerScore'])
scores = pd.concat([answerID, answerScore], axis= 1)
print(scores)

aIDs = newanswers[['Id' , 'ParentId(QuestionId)']]
scores['questionID'] = np.zeros(len(scores))
for id, parent in zip(aIDs['Id'], aIDs['ParentId(QuestionId)']):
  scores.loc[ scores['answerID'] == id , 'questionID'] = parent

print(scores)

accepted = []
for q in scores['questionID'].unique():
  accepted.append(scores.iloc[scores.loc[scores['questionID'] == q, 'answerScore'].idxmax(), 0])

len(accepted)

trueAccepted = questions['AcceptedAnswerId'].to_numpy()
correct = 0
for i in accepted:
  if i in trueAccepted:
    correct += 1

print( "accuracy: %.2f%%" %(correct / len(accepted)*100 ))